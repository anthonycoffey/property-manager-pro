import type {
  ThemeOptions as MuiThemeOptions,
  Theme as BaseMuiTheme, // Import MuiTheme as BaseMuiTheme
  Palette as MuiPalette,
  PaletteOptions as MuiPaletteOptions,
  TypeBackground as MuiTypeBackground,
  TypeText as MuiTypeText,
  CommonColors as MuiCommonColors,
  Shadows as MuiShadows,
  // Components as MuiComponents, // Removed unused import
  TypographyVariantsOptions as MuiTypographyVariantsOptions,
  CSSObject,
} from '@mui/material/styles';

// Import themeConfig for its value, and PaletteColorNoChannels as a type
import { themeConfig } from './theme-config';
import type { PaletteColorNoChannels as ConfigPaletteColorNoChannels } from './theme-config';


// Re-exporting PaletteColorNoChannels from theme-config for central access if needed
export type { PaletteColorNoChannels } from './theme-config';


// --- Palette Extension Types (from material-kit-react structure) ---
export type PaletteColorKey = 'primary' | 'secondary' | 'info' | 'success' | 'warning' | 'error';

// Palette color with additional channels (as generated by our createPaletteChannel)
export interface PaletteColorWithChannels extends ConfigPaletteColorNoChannels { // Use imported type
  lighterChannel?: string;
  lightChannel: string;
  mainChannel: string;
  darkChannel: string;
  darkerChannel?: string;
  contrastTextChannel?: string; // Added for completeness
}

export interface CommonColorsWithChannels extends MuiCommonColors {
  whiteChannel?: string;
  blackChannel?: string;
}

export interface GreyColorsWithChannels extends Readonly<typeof themeConfig.palette.grey> { // Use typeof for grey scale
  '50Channel'?: string;
  '100Channel'?: string;
  '200Channel'?: string;
  '300Channel'?: string;
  '400Channel'?: string;
  '500Channel'?: string;
  '600Channel'?: string;
  '700Channel'?: string;
  '800Channel'?: string;
  '900Channel'?: string;
}
export interface TypeTextWithChannels extends MuiTypeText {
  primaryChannel?: string;
  secondaryChannel?: string;
  disabledChannel?: string;
}

export interface TypeBackgroundWithChannels extends MuiTypeBackground {
  paperChannel?: string;
  defaultChannel?: string;
  neutral: string; // As used in material-kit-react, should be present
  neutralChannel?: string;
}

export interface ActionColorsWithChannels {
  hover?: string;
  selected?: string;
  disabled?: string;
  disabledBackground?: string;
  focus?: string;
  hoverOpacity?: number;
  disabledOpacity?: number;
  active?: string; // from material-kit-react
  // Channel versions if needed, though actions are often derived
  activeChannel?: string;
  disabledChannel?: string;
}


// --- Custom Shadows Type ---
export interface CustomShadows {
  z1?: string;
  z4?: string;
  z8?: string;
  z12?: string;
  z16?: string;
  z20?: string;
  z24?: string;
  primary?: string;
  secondary?: string;
  info?: string;
  success?: string;
  warning?: string;
  error?: string;
  card?: string;
  dialog?: string;
  dropdown?: string;
}

// --- Typography Extension Types ---
export interface TypographyCustom {
  fontWeightSemiBold?: CSSObject['fontWeight'];
  fontSecondaryFamily?: CSSObject['fontFamily'];
}

// --- Theme Mode ---
export type ThemeColorScheme = 'light' | 'dark';


// --- MUI Theme Options Extended ---
// This will be the main ThemeOptions type used in create-theme.ts
export interface ThemeOptions extends MuiThemeOptions {
  palette?: MuiPaletteOptions & {
    [key in PaletteColorKey]?: PaletteColorWithChannels;
  } & {
    common?: CommonColorsWithChannels;
    grey?: GreyColorsWithChannels;
    text?: Partial<TypeTextWithChannels>;
    background?: Partial<TypeBackgroundWithChannels>;
    action?: Partial<ActionColorsWithChannels>;
    divider?: string; // material-kit-react has this
  };
  customShadows?: CustomShadows;
  typography?: MuiTypographyVariantsOptions & TypographyCustom;
  // For MUI's experimental CSS variables and color schemes
  colorSchemes?: Partial<Record<ThemeColorScheme, {
    palette: ThemeOptions['palette'],
    shadows?: MuiShadows, // Standard shadows can also be per-scheme
    customShadows?: CustomShadows, // Custom shadows per-scheme
  }>>;
  cssVariables?: typeof themeConfig.cssVariables; // from theme-config
}

// --- MUI Theme Extended (for use with useTheme hook or styled components) ---
export interface Theme extends BaseMuiTheme { // Extend BaseMuiTheme
  palette: MuiPalette & { // Ensure MuiPalette is used here
    [key in PaletteColorKey]: PaletteColorWithChannels; // These are the fully processed colors
  } & {
    common: CommonColorsWithChannels; // Fully processed
    grey: GreyColorsWithChannels; // Fully processed
    text: TypeTextWithChannels; // Fully processed
    background: TypeBackgroundWithChannels; // Fully processed
    action: ActionColorsWithChannels; // Fully processed
    divider: string;
  };
  customShadows: CustomShadows;
  typography: BaseMuiTheme['typography'] & TypographyCustom; // Ensure compatibility with MUI's Typography type
}

// Specific type for our fully constructed light palette object
export interface FullyDefinedLightPalette extends MuiPaletteOptions {
  mode: 'light';
  primary: PaletteColorWithChannels;
  secondary: PaletteColorWithChannels;
  info: PaletteColorWithChannels;
  success: PaletteColorWithChannels;
  warning: PaletteColorWithChannels;
  error: PaletteColorWithChannels;
  common: CommonColorsWithChannels;
  grey: GreyColorsWithChannels;
  text: TypeTextWithChannels;
  background: TypeBackgroundWithChannels;
  divider: string;
  action: ActionColorsWithChannels;
}

rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions for authentication and authorization
    function isAuthenticated() {
      return request.auth != null;
    }

    function hasRole(role) {
      return isAuthenticated() && request.auth.token.roles.hasAny([role]);
    }

    function isAdmin() {
      return hasRole('admin');
    }

    function isPropertyManager() {
      return hasRole('property_manager');
    }

    function isOrganizationManager() {
      return hasRole('organization_manager');
    }

    function isCampaignCreator(resourceData, auth) {
      return auth != null && auth.uid == resourceData.createdBy;
    }

    function isPropertyManagerForCampaignOrg(orgId, auth) {
      // Assumes PM has single orgId in claim from context.auth.token.organizationId
      return auth != null && auth.token.roles.hasAny(['property_manager']) && auth.token.organizationId == orgId;
    }

    function isOrgManagerForCampaignOrg(orgId, auth) { // Renamed from existing to take auth and check roles
      return auth != null && auth.token.roles.hasAny(['organization_manager']) && auth.token.organizationIds.hasAny([orgId]);
    }

    // function isPropertyStaff() {
    //   return hasRole('property_staff');
    // }

    function isResident() {
      return hasRole('resident');
    }

    function isOrgUser(orgId) { // This is for users with a single organizationId claim
      return isAuthenticated() && request.auth.token.organizationId == orgId;
    }

    function isOrgManagerForOrg(orgId) { // For organization_manager with an array of organizationIds
      return isOrganizationManager() && request.auth.token.organizationIds.hasAny([orgId]);
    }

    function isPropertyResident(orgId, propId) {
      return isAuthenticated() &&
             request.auth.token.organizationId == orgId &&
             request.auth.token.propertyId == propId;
    }

    // Helper function for campaign creation validation
    function hasRequiredCampaignCreateFields(data) {
      // Validates data provided by the client for campaign creation
      // Server will set: createdBy, createdAt, status, totalAccepted, accessUrl (for public_link), totalInvitedFromCsv (for csv_import)
      return (
        data.campaignName is string && data.campaignName.size() > 0 &&
        data.campaignType is string && (data.campaignType == 'csv_import' || data.campaignType == 'public_link') &&
        // targetPropertyId and organizationId are validated by path segments in the rule itself
        data.rolesToAssign is list && data.rolesToAssign.size() > 0 && data.rolesToAssign[0] == 'resident' && // Assuming only resident roles for now
        // Ensure client does not attempt to set server-controlled fields during creation
        !('status' in data) &&
        !('createdBy' in data) &&
        !('createdAt' in data) &&
        !('totalAccepted' in data) &&
        !('accessUrl' in data) && // Server generates this for public_link
        !('totalInvitedFromCsv' in data) && // Server calculates this for csv_import
        (data.maxUses == null || (data.maxUses is number && data.maxUses >= 0)) && // maxUses can be 0 to effectively disable
        (data.expiresAt == null || data.expiresAt is timestamp) &&
        // Type-specific field validations
        (
          (data.campaignType == 'csv_import' &&
            data.storageFilePath is string && data.storageFilePath.size() > 0 &&
            data.sourceFileName is string && data.sourceFileName.size() > 0
          ) ||
          (data.campaignType == 'public_link' &&
            !('storageFilePath' in data) && // Should not be present for public_link
            !('sourceFileName' in data)     // Should not be present for public_link
          )
        )
      );
    }

    // Helper function for campaign update validation
    // function canUpdateCampaignFields(requestData, resourceData) {
    //   // requestData is request.resource.data (new state), resourceData is resource.data (old state)
    //   // Allowed to change by client: campaignName, status (to active, inactive, expired), errorDetails
    //   return requestData.campaignType == resourceData.campaignType &&
    //          requestData.targetPropertyId == resourceData.targetPropertyId &&
    //          requestData.organizationId == resourceData.organizationId &&
    //          requestData.createdBy == resourceData.createdBy &&
    //          requestData.createdAt == resourceData.createdAt &&
    //          requestData.totalAccepted == resourceData.totalAccepted && // Client cannot change this
    //          requestData.rolesToAssign == resourceData.rolesToAssign &&
    //          // Type specific immutable fields (must match old state if they exist)
    //          (resourceData.campaignType != 'public_link' || requestData.accessUrl == resourceData.accessUrl) &&
    //          (resourceData.campaignType != 'csv_import' || (requestData.storageFilePath == resourceData.storageFilePath &&
    //                                                           requestData.sourceFileName == resourceData.sourceFileName &&
    //                                                           requestData.totalInvitedFromCsv == resourceData.totalInvitedFromCsv)) &&
    //          // Validate mutable fields in the new state (requestData)
    //          (requestData.campaignName is string && requestData.campaignName.size() > 0) &&
    //          (requestData.status is string && (requestData.status == 'active' || requestData.status == 'inactive' || requestData.status == 'expired')) &&
    //          (requestData.maxUses == null || (requestData.maxUses is number && requestData.maxUses >= 0)) &&
    //          (requestData.expiresAt == null || requestData.expiresAt is timestamp) &&
    //          (requestData.errorDetails == null || requestData.errorDetails is string) &&
    //          // Ensure no other fields are added that weren't in resource.data or are not the explicitly mutable ones.
    //          // All keys in the new document must have existed in the old document OR be one of the allowed mutable fields.
    //          requestData.keys().hasOnly(resource.data.keys().toSet().union(['campaignName', 'status', 'maxUses', 'expiresAt', 'errorDetails']));
    // }

    function areImmutableCampaignFieldsUnchanged(requestData, resourceData) {
      // Checks that fields that should never change after creation are indeed unchanged.
      // Note: organizationId and propertyId are part of the path and implicitly constant for the doc.
      // If client sends them in request body, they must match the existing resource.
      return requestData.campaignType == resourceData.campaignType &&
             requestData.createdBy == resourceData.createdBy &&
             requestData.createdAt.toMillis() == resourceData.createdAt.toMillis() && // Compare millis for timestamps
             requestData.totalAccepted == resourceData.totalAccepted && // Client cannot change this
             requestData.rolesToAssign.size() == resourceData.rolesToAssign.size() && // Simple list check for now
             requestData.rolesToAssign[0] == resourceData.rolesToAssign[0] && // Assuming single role in list
             // Immutable optional fields: if they exist in old data, they must exist in new and be same, or not exist in new.
             // If they didn't exist in old, they cannot be added by client.
             (requestData.accessUrl == resourceData.accessUrl) && // Handles null vs. value vs. field not present consistently
             (requestData.storageFilePath == resourceData.storageFilePath) &&
             (requestData.sourceFileName == resourceData.sourceFileName) &&
             (requestData.totalInvitedFromCsv == resourceData.totalInvitedFromCsv) &&
             // Ensure orgId and propId from body (if sent) match resource, reinforcing path consistency
             requestData.organizationId == resourceData.organizationId &&
             requestData.propertyId == resourceData.propertyId;
    }


    // Rules for top-level collections
    match /mail/{document=**} {
      // Allow authenticated users to create mail documents (e.g., for sending emails)
      // Admins can read/write all mail documents
      allow read, write: if isAuthenticated();
    }

    match /templates/{document=**} {
      // Allow only admins to read/write email templates
      allow read, write: if isAdmin();
    }

    // The root /users collection is no longer used for storing user profiles.
    // Profiles are stored in /admins/{adminId} or /organizations/{orgId}/users/{userId} or /organizations/{orgId}/properties/{propId}/residents/{residentId}

    match /admins/{adminId} {
      // Only allow admin role to read/write admin profiles
      allow read, write: if isAdmin();

      // Allow admins to read their own notifications
      match /notifications/{notificationId} {
        allow list, get, create, update, delete: if isAdmin() && request.auth.uid == adminId;
      }
    }

    match /organizations/{organizationId} {
      // Admins can create, read, update, delete organizations
      allow create, read, delete: if isAdmin();
      allow update: if isAdmin() ||
                       (isOrgManagerForOrg(organizationId) &&
                        request.resource.data.keys().hasAll(['name', 'notificationSettings'])) ||
                       (isPropertyManager() && isOrgUser(organizationId) &&
                        request.resource.data.keys().hasAll(['name', 'notificationSettings']));

      // Organization Managers can create, read, update their assigned organizations or those they created
      allow create: if isOrganizationManager(); // OM can create any organization
      allow read: if isOrgManagerForOrg(organizationId) || (isOrganizationManager() && resource.data.createdBy == request.auth.uid);
      // Organization users (like PMs with single orgId) can read their own organization's document
      allow read: if isOrgUser(organizationId) && (isPropertyManager() /* || isPropertyStaff() */);


      // Subcollection: googleAuth
      match /googleAuth/{userId} {
        // Allow a property manager to read their own google auth document
        allow read: if isPropertyManager() && isOrgUser(organizationId) && request.auth.uid == userId;
      }

      // Subcollection: users (Property Managers, Staff, Organization Managers if profile stored here)
      match /users/{orgUserId} {
        // Admins can manage all organization users
        allow read, write: if isAdmin();
        // Organization Managers can manage users within their assigned organizations
        allow read, write: if isOrgManagerForOrg(organizationId);
        // Property Managers can manage users within their organization (if not already covered by OrgManager)
        // This rule might be redundant if OrgManagers handle user management.
        // For now, let's assume PMs can also manage users if they have the PM role and are in their org.
        allow read, write: if isPropertyManager() && isOrgUser(organizationId);
        // Property Staff can read users within their organization
        // allow read: if isPropertyStaff() && isOrgUser(organizationId); // isPropertyStaff is commented out

        match /notifications/{notificationId} {
          allow list, get, create, update, delete: if isPropertyManager() && request.auth.uid == orgUserId;
        }
      }

      // Subcollection: properties
      match /properties/{propertyId} {
        // Admins can manage all properties
        allow read, write: if isAdmin();
        // Organization Managers can manage properties within their assigned organizations
        allow read, write: if isOrgManagerForOrg(organizationId);
        // Property Managers can manage properties within their organization
        allow read, write: if isPropertyManager() && isOrgUser(organizationId);
        // Property Staff can read properties within their organization
        // allow read: if isPropertyStaff() && isOrgUser(organizationId); // isPropertyStaff is commented out
        // Residents can read the specific property they belong to
        allow read: if isResident() && isPropertyResident(organizationId, propertyId);

      // Subcollection: residents
        match /residents/{residentId} {
          // Admins can manage all residents
          allow read, write: if isAdmin();
          // Organization Managers can manage residents within their assigned organizations
          allow read, write: if isOrgManagerForOrg(organizationId);
          // Property Managers can manage residents within their organization and property
          allow read, write: if isPropertyManager() && isOrgUser(organizationId);

          // Residents can read their own profile
          allow read, write: if isResident() && request.auth.uid == residentId && isPropertyResident(organizationId, propertyId);
          // Residents can update specific fields of their own profile
          allow update: if isResident() && request.auth.uid == residentId && isPropertyResident(organizationId, propertyId) &&
                           request.resource.data.keys().hasOnly(['displayName', 'vehicleMake', 'vehicleModel', 'vehicleColor', 'licensePlate'
                           // Add other resident-updatable fields here, e.g. 'contactPreferences'
                           // Critical fields like email, roles, organizationId, propertyId should NOT be updatable by resident directly here.
                           // Ensure that fields not listed here cannot be changed by comparing request.resource.data to resource.data for unchanged fields.
                           ]) &&
                           // Ensure non-updatable fields remain unchanged
                           request.resource.data.email == resource.data.email &&
                           request.resource.data.organizationId == resource.data.organizationId &&
                           request.resource.data.propertyId == resource.data.propertyId &&
                           request.resource.data.roles == resource.data.roles &&
                           request.resource.data.invitedBy == resource.data.invitedBy &&
                           request.resource.data.createdAt == resource.data.createdAt &&
                           (request.resource.data.unitNumber == resource.data.unitNumber || resource.data.unitNumber == null) && // unitNumber might be set by PM
                           (request.resource.data.leaseStartDate == resource.data.leaseStartDate || resource.data.leaseStartDate == null) &&
                           (request.resource.data.leaseEndDate == resource.data.leaseEndDate || resource.data.leaseEndDate == null);
        } // End of residents subcollection

        // Subcollection: campaigns
        // Path: /organizations/{organizationId}/properties/{propertyId}/campaigns/{campaignId}
        match /campaigns/{campaignId} {
          // CREATE
          allow create: if (isAdmin() ||
                           isOrgManagerForOrg(organizationId) ||
                           (isPropertyManager() && isOrgUser(organizationId))) &&
                           // Common validations for all creators
                           request.resource.data.organizationId == organizationId &&
                           request.resource.data.propertyId == propertyId &&
                           // createdBy will be set by Cloud Function, not validated against request.auth.uid here
                           // as the function uses admin SDK. Instead, ensure it's not set by client.
                           // createdAt will be set by Cloud Function.
                           hasRequiredCampaignCreateFields(request.resource.data);

          // READ
          allow read: if isAdmin() ||
                         isOrgManagerForOrg(organizationId) ||
                         (isPropertyManager() && isOrgUser(organizationId));
                         // Public access to specific campaign data for /join?campaign={id} link
                         // is handled by a Cloud Function, not direct read rules here.

          // UPDATE
          allow update: if
            // Common check: immutable fields must not change
            areImmutableCampaignFieldsUnchanged(request.resource.data, resource.data) &&
            (
              // Case 1: Editing campaignName, maxUses, expiresAt
              (
                // Permissions for edit: Admin OR OM for org OR (PM for org AND creator)
                (isAdmin() || isOrgManagerForCampaignOrg(resource.data.organizationId, request.auth) || (isPropertyManagerForCampaignOrg(resource.data.organizationId, request.auth) && isCampaignCreator(resource.data, request.auth))) &&
                // Ensure only allowed fields are being modified for an edit operation
                // Client must send the full document, so all other fields must match resource.data
                request.resource.data.keys().hasOnly(resource.data.keys().toSet().union(['campaignName', 'maxUses', 'expiresAt'].toSet())) &&
                // Validate types and constraints of fields being changed (if they are present in request)
                (!('campaignName' in request.resource.data) || (request.resource.data.campaignName is string && request.resource.data.campaignName.size() >= 3 && request.resource.data.campaignName.size() <= 100)) &&
                (!('maxUses' in request.resource.data) || request.resource.data.maxUses == null || (request.resource.data.maxUses is number && request.resource.data.maxUses >= 1 && request.resource.data.maxUses <= 10000)) &&
                (!('expiresAt' in request.resource.data) || request.resource.data.expiresAt == null || (request.resource.data.expiresAt is timestamp && request.resource.data.expiresAt > request.time)) &&
                // Campaign must be in an editable state (not completed, expired, error, processing)
                !(resource.data.status in ['completed', 'expired', 'error', 'processing']) &&
                // Status must not be changed during this type of edit (deactivation is separate)
                request.resource.data.status == resource.data.status
              ) ||
              // Case 2: Deactivating (setting status to 'inactive')
              (
                // Permissions for deactivate: Admin OR OM for org OR PM for org
                (isAdmin() || isOrgManagerForCampaignOrg(resource.data.organizationId, request.auth) || isPropertyManagerForCampaignOrg(resource.data.organizationId, request.auth)) &&
                request.resource.data.status == 'inactive' && // New status must be inactive
                resource.data.status != 'inactive' &&         // Can only set to inactive if not already
                // Ensure only status is changing for deactivation, all other fields must match resource.data
                request.resource.data.keys().hasOnly(resource.data.keys().toSet().union(['status'].toSet())) &&
                // Campaign must not be in a terminal state already (completed, expired, error)
                !(resource.data.status in ['completed', 'expired', 'error'])
              )
            );

          // DELETE
          allow delete: if
            resource.data.status == 'inactive' && // CRITICAL: Campaign must be inactive to be deleted
            ( // Permissions for delete: Admin OR OM for org OR (PM for org AND creator)
              isAdmin() ||
              isOrgManagerForCampaignOrg(resource.data.organizationId, request.auth) ||
              (isPropertyManagerForCampaignOrg(resource.data.organizationId, request.auth) && isCampaignCreator(resource.data, request.auth))
            );
        } // End of campaigns subcollection

        // Subcollection: violations
        match /violations/{violationId} {
          // Create is handled by a callable function. This rule provides an additional layer of security.
          allow create: if (isPropertyManager() || isOrganizationManager() || isAdmin()) &&
                           request.resource.data.reporterId == request.auth.uid;

          // Admins and Org Managers can read/update violations in their orgs.
          allow read, update: if isAdmin() || isOrgManagerForOrg(organizationId);

          // Property Managers can read/update violations in their properties.
          allow read, update: if isPropertyManager() && isOrgUser(organizationId);

          // Residents can read their own violations (reported or assigned) OR any unclaimed violation in their property.
          allow read: if isResident() && isPropertyResident(organizationId, propertyId) &&
                         (resource.data.residentId == null ||
                          request.auth.uid == resource.data.residentId ||
                          request.auth.uid == resource.data.reporterId);
          
          // Residents can update violations in two cases:
          // 1. Acknowledging a violation that is assigned to them.
          // 2. Claiming a violation that is not yet assigned to anyone.
          allow update: if isResident() && isPropertyResident(organizationId, propertyId) && (
            // Case 1: Acknowledging an assigned violation
            (resource.data.residentId == request.auth.uid &&
             request.resource.data.status == 'acknowledged' &&
             request.resource.data.keys().hasAll(['status', 'acknowledgedAt'])) ||
            // Case 2: Claiming an unassigned violation
            (resource.data.residentId == null &&
             request.resource.data.residentId == request.auth.uid &&
             request.resource.data.status == 'claimed' &&
             request.resource.data.keys().hasAll(['residentId', 'status', 'claimedAt']))
          );
        }

        // Subcollection: notifications (Property-wide notifications)
        match /notifications/{notificationId} {
          // READ: Admins, Org Managers for the org, PMs for the org, and residents of the specific property can read.
          allow read: if isAdmin() ||
                         isOrgManagerForOrg(organizationId) ||
                         (isPropertyManager() && isOrgUser(organizationId)) ||
                         isPropertyResident(organizationId, propertyId);

          // CREATE: Admins, Org Managers, and Property Managers can create.
          // Creation logic is handled by a callable function which also checks roles.
          allow create: if isAdmin() || isOrgManagerForOrg(organizationId) || (isPropertyManager() && isOrgUser(organizationId));

          // UPDATE, DELETE: Disallowed for now to maintain an immutable record.
          allow update, delete: if false;
        }
      } // End of properties subcollection

      // Subcollection: invitations
      match /invitations/{invitationId} {
        // Admins can manage all invitations (create, read, update, delete)
        allow read, write: if isAdmin();

        // Organization Managers can manage invitations within their assigned organizations
        allow create: if isOrgManagerForOrg(organizationId) &&
                        request.resource.data.createdBy == request.auth.uid &&
                        request.resource.data.organizationId == organizationId; // Ensure invitation is for one of their orgs
        allow read, update: if isOrgManagerForOrg(organizationId);


        // Property Managers can create invitations within their organization.
        allow create: if isPropertyManager() && isOrgUser(organizationId) &&
                        request.resource.data.createdBy == request.auth.uid &&
                        request.resource.data.organizationId == organizationId;
        allow read, update: if isPropertyManager() && isOrgUser(organizationId);


      // Public read for a specific invitation token (e.g., when user clicks link before sign-up)
      // This is tricky because unauthenticated users can't be easily granted specific doc access.
      // The `signUpWithInvitation` function will handle token validation server-side.
      // Client-side, if a page needs to display invitation details pre-auth, it would call a function.
      // For now, we assume authenticated reads by PM/Admin cover most UI needs.
      // If unauthenticated read of an invitation is needed, a Cloud Function acting as a proxy would be safer.
    }

    match /globalInvitations/{invitationId} {
      // Allow unauthenticated users to read a specific invitation document
      // This is necessary for the /accept-org-manager-invitation page to fetch details
      allow read: if true; // Public read for invitation details

      // Only admins can create, update, or delete global invitations
      allow create, update, delete: if isAdmin();
    }


      // Subcollection: services
      match /services/{serviceId} {
        allow read, write: if isAdmin(); // Admin full access

        // Organization Manager access
        allow read, write: if isOrgManagerForOrg(organizationId) && resource.data.organizationId == organizationId;


        // --- Property Manager/Staff Rules ---
        // GET, UPDATE, DELETE single service document
        allow get, update, delete: if (isPropertyManager() /* || isPropertyStaff() */ ) &&
                                      isOrgUser(organizationId) &&
                                      resource.data.organizationId == organizationId &&
                                      resource.data.propertyId == request.auth.token.propertyId;

        // LIST services (client query must filter by propertyId for effective scoping by this rule)
        allow list: if (isPropertyManager() /* || isPropertyStaff() */) &&
                       isOrgUser(organizationId) &&
                       request.auth.token.propertyId != null; // Must be associated with a property

        // CREATE service
        allow create: if (isPropertyManager() /* || isPropertyStaff() */) &&
                         isOrgUser(organizationId) &&
                         request.auth.token.propertyId != null &&
                         request.resource.data.organizationId == organizationId &&
                         request.resource.data.propertyId == request.auth.token.propertyId;

        // --- Resident Rules ---
        // CREATE service request
        allow create: if isResident() &&
                         isOrgUser(organizationId) && 
                         request.auth.token.propertyId != null &&
                         request.resource.data.residentId == request.auth.uid &&
                         request.resource.data.organizationId == organizationId &&
                         request.resource.data.propertyId == request.auth.token.propertyId;

        // GET single service request
        allow get: if isResident() &&
                      isOrgUser(organizationId) &&
                      request.auth.token.propertyId != null && // Ensure resident has a property for context
                      resource.data.residentId == request.auth.uid &&
                      resource.data.organizationId == organizationId && 
                      resource.data.propertyId == request.auth.token.propertyId;

        // LIST service requests (client query must filter by residentId)
        allow list: if isResident() &&
                       isOrgUser(organizationId) &&
                       request.auth.token.propertyId != null; // Ensure resident has a property for context

        // UPDATE own service request
        allow update: if isResident() &&
                         isOrgUser(organizationId) &&
                         request.auth.token.propertyId != null && // Ensure resident has a property for context
                         resource.data.residentId == request.auth.uid &&
                         resource.data.organizationId == organizationId && 
                         resource.data.propertyId == request.auth.token.propertyId;
                         // && (add field validation here for what can be updated)
      }
    }

    // Collection group for notifications
    match /{path=**}/notifications/{notificationId} {
      // Allow backend services (e.g., Cloud Functions) to create notifications.
      // This is identified by the absence of request.auth when using the Admin SDK.
      allow create: if request.auth == null;

      // Allow all to manage notifications for now
      allow read, update, delete: if true;
    }
  }
}
